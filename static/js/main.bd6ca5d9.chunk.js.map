{"version":3,"sources":["img/email.svg","img/phone.svg","img/map-marker.svg","img/github.svg","components/Header.js","components/EditInput.js","components/GeneralIntro.js","components/GeneralLink.js","components/Section.js","components/Skills.js","components/WorkExperience.js","components/Education.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","onClick","this","props","onEditClick","onPreviewClick","React","Component","EditInput","input","document","querySelector","textarea","focus","_this","field","textValue","value","replace","trim","field-input","section","workid","educationid","rows","cols","defaultValue","onChange","onInputChange","renderInputOrTextArea","onButtonClicked","GeneralIntro","renderField","fieldName","generalState","EditInput_EditInput","onSaveClick","onInput","onFieldClick","iseditable","GeneralLink","src","iconMail","alt","iconPhone","iconLocation","iconGit","Section","sectionName","Skills","addSkill","skillsList","map","task","index","key","toString","p-id","concat","skillid","onDeleteSkill","onAddSkill","WorkExperience","n","workObject","worksList","workExperience","workExperienceIndex","tasks","taskIndex","onDeleteTask","taskid","onSaveTask","onEditTask","onDeleteWorkExperience","onAddWorkExperience","Education","educationList","education","educationIndex","onDeleteEducation","onAddEducation","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","editField","hide","prevGeneralIntro","objectSpread","state","generalIntro","prevGeneralLink","generalLink","prevWorkExp","toConsumableArray","workExperiences","jobTitle","company","date","location","prevEducation","eduTitle","school","setState","skills","show","e","fieldSection","target","getAttribute","prevObject","workExpNumber","educationNumber","defineProperty","save","workExpId","sectionid","skill","saveSkill","prevSkillsList","push","deleteSkill","skillId","prevSkills","splice","addWorkExperience","deleteWorkExperience","saveTask","deleteTask","taskId","addEducation","deleteEducation","mode","preview","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","querySelectorAll","forEach","setAttribute","button","classList","add","stop","apply","arguments","edit","remove","name","job","desc","mail","number","git","_this2","addEventListener","stopImmediatePropagation","Header_Header","GeneralIntro_GeneralIntro","GeneralLink_GeneralLink","Section_Section","Skills_Skills","WorkExperience_WorkExperience","Education_Education","href","viewBox","fill","d","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bd6ca5d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/email.302d2a47.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone.97f63838.svg\";","module.exports = __webpack_public_path__ + \"static/media/map-marker.c33a1ae9.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.064d471d.svg\";","import React from 'react';\nimport '../styles/Header.css';\n\nclass Header extends React.Component{\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<h2>CV React</h2>\n\t\t\t\t<h3>Instruction:</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li> Click on fields to edit them! </li>\n\t\t\t\t</ul>\n\t\t\t\t<div className='btn-edit-preview'>\n\t\t\t\t\t<div className='btn-slider'>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='btn-edit' onClick = { this.props.onEditClick }>\n\t\t\t\t\t\t<p>Edit CV</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='btn-preview' onClick = { this.props.onPreviewClick } >\n\t\t\t\t\t\t<p>Preview CV</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { Header };","import React from 'react';\nimport '../styles/EditInput.css';\n\n\n/***************************************************************************************   \nThis component will an input (or textarea) field and a save button to let user\nedit the CV. \n\nIt's showed on page when user click on a field. \nThe field is hidden, and instead of it, an input or textarea is displayed,\nto let the user enter a new value. \n****************************************************************************************/\n\nclass EditInput extends React.Component{\n\n\tcomponentDidMount(){\n\t\t// Focus input or textarea field when this component is rendered.\n\t\tconst input = document.querySelector('input');\n\t\tconst textarea = document.querySelector('textarea');\n\t\tif (input) input.focus();\n\t\tif (textarea) textarea.focus();\n\t};\n\n\trender(){\n\t\tconst renderInputOrTextArea = () => {\n\t\t\t// If the field to be edited is the description \"desc\" field...\n\t\t\t// ... a textarea will be showed instead of a input.\n\n\t\t\tif (this.props.field === 'desc') {\n\t\t\t\tlet textValue = this.props.value;\n\t\t\t\ttextValue = textValue.replace(/\\s+/g, ' ').trim();\n\n\t\t\t\treturn <textarea field-input={this.props.field} section={this.props.section} workid={this.props.workid} educationid={this.props.educationid} rows=\"4\" cols=\"50\" defaultValue={textValue} onChange={this.props.onInputChange}></textarea>;\n\t\t\t} else {\n\t\t\t\treturn <input field-input={this.props.field} section={this.props.section} workid={this.props.workid} educationid={this.props.educationid} defaultValue={this.props.value} onChange={this.props.onInputChange}></input>;\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn(\n\t\t\t<div className='edit-input'>\n\t\t\t\t{renderInputOrTextArea()}\n\t\t\t\t<button onClick={this.props.onButtonClicked}>Save</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { EditInput };","import React from 'react';\nimport { EditInput } from '../components/EditInput';\nimport '../styles/GeneralIntro.css';\n\n\n/***************************************************************************************   \nThis component render the \"General Intro\" section of the CV: Name, Job title, description.\n\nAll the fields can be edited by clicking on them. \n****************************************************************************************/\n\nclass GeneralIntro extends React.Component{\n   \n\trender(){\n\t\tconst renderField = (fieldName) => {\n\t\t\t// Function to render either an text field or input (edit) field.\n\t\t\tlet isEditField = this.props.generalState[fieldName][1];\n\n\t\t\tif (isEditField) {\n\t\t\t\t  return <EditInput field={fieldName} section=\"generalIntro\" value={this.props.generalState[fieldName][0]} onButtonClicked={this.props.onSaveClick} onInputChange={this.props.onInput} />;\n\t\t\t  } else {\n\t\t\t\treturn <p onClick={this.props.onFieldClick} iseditable='true' field={fieldName}  section=\"generalIntro\">{this.props.generalState[fieldName][0]}</p>;\n\t\t\t}\n\t\t  };\n\t\t\n\t\treturn(\t\n\t\t\t<div className=\"general-intro\">\n\t\t\t\t{renderField('name')}\n\t\t\t\t{renderField('job')}\n\t\t\t\t{renderField('desc')}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { GeneralIntro };","import React from 'react';\nimport { EditInput } from '../components/EditInput';\nimport '../styles/GeneralLink.css';\nimport iconMail from '../img/email.svg';\nimport iconPhone from '../img/phone.svg';\nimport iconLocation from '../img/map-marker.svg';\nimport iconGit from '../img/github.svg';\n/***************************************************************************************   \nThis component render the \"General Link\" section of the CV: mail, number location and github link.\n\nAll the fields can be edited by clicking on them. \n****************************************************************************************/\n\nclass GeneralLink extends React.Component{\n\n\trender(){\n\t\tconst renderField = (fieldName) => {\n\t\t\t// Function to render either an text field or input (edit) field.\n\t\t\tlet isEditField = this.props.generalState[fieldName][1];\n\n\t\t\tif (isEditField) {\n\t\t\t\treturn <EditInput field={fieldName} section=\"generalLink\" value={this.props.generalState[fieldName][0]} onButtonClicked={this.props.onSaveClick} onInputChange={this.props.onInput} />;\n\t\t\t  } else {\n\t\t\t\treturn <p onClick={this.props.onFieldClick} iseditable='true' field={fieldName} section=\"generalLink\"> { this.props.generalState[fieldName][0] } </p>;\n\t\t\t}\n\t\t  };\n\n\t\treturn(\t\n\t\t\t<div className=\"general-link\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{ renderField('mail') }\n\t\t\t\t\t\t<img src={ iconMail } alt=\"Mail icon\"/>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{ renderField('number') }\n\t\t\t\t\t\t<img src={ iconPhone } alt=\"Phone icon\"/>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{ renderField('location') }\n\t\t\t\t\t\t<img src={ iconLocation } alt=\"Map marker icon\"/>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{ renderField('git') }\n\t\t\t\t\t\t<img src={ iconGit } alt=\"Github icon\"/>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t    </div>\n\t\t);\n\t}\n}\n\nexport { GeneralLink };","import React from 'react';\nimport '../styles/Section.css';\n\n\n/***************************************************************************************   \nThis component render the \"General Intro\" section of the CV: Name, Job title, description.\n\nAll the fields can be edited by clicking on them. \n****************************************************************************************/\n\nclass Section extends React.Component{\n   \n\trender(){\n\t\t\n\t\treturn(\t\n\t\t\t<div className=\"section\">\n\t\t\t\t<h2>{this.props.sectionName}</h2>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { Section };","import React from 'react';\nimport { EditInput } from './EditInput';\nimport '../styles/Skills.css';\n\n\n/***************************************************************************************   \nThis component render the \"Skills\" section of the CV.\n\nUser can add skills by clicking on the \"+\" AddSkill button\n****************************************************************************************/\n\nclass Skills extends React.Component{\n\t  \n\trender(){\n\t\t// When user click on the \"+\" AddSkill button...\n\t\t// ... App.js will set the skills state object as \"editing\"...\n\t\tlet addSkill = this.props.skillsList[1];\n\n\t\t// ... so an input element will be rendered instead of the \"+\" AddSkill button to let user enter a new value.\n\t\tconst renderAddButton = () => {\n\t\t  if (addSkill) {\n\t\t\t\treturn <EditInput field='skills' section=\"skills\" onButtonClicked={this.props.onSaveClick} />;\n\t\t\t} else {\n\t\t  \t\treturn <button  section=\"skills\" onClick={this.props.onAddSkill}>✚</button>;\n\t\t  }\n\t\t};\n\n\t\treturn(\t\n\t\t\t<div className=\"skills-container\">\n\t\t\t\t{ this.props.skillsList[0].map( (task, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index.toString()} className=\"skills\" iseditable='true'>\n\t\t\t\t\t\t\t<p p-id={`${index}`}> { task } </p>\n\t\t\t\t\t\t\t<button skillid = { index } onClick={this.props.onDeleteSkill}>✕</button>\n\t\t\t\t\t\t</div>);\n\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t{ renderAddButton() }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { Skills };","import React from 'react';\nimport { EditInput } from './EditInput';\nimport '../styles/WorkExperience.css';\n\nclass WorkExperience extends React.Component{\n\trender(){\n\t\tconst renderAddTaskButton = (n) => {\n\t\t\t// Render \"+ Task\" button or Task edit field\n\t\t    let isEdit = this.props.worksList[n].tasks[1];\n\n\t\t    if (isEdit) {\n\t\t\t\treturn <EditInput field=\"tasks\" section=\"workExperiences\" workid={ n } onButtonClicked={this.props.onSaveTask} />;\n\t\t\t} else {\n\t\t  \t\treturn <button field=\"tasks\" section=\"workExperiences\" workid={ n } onClick={this.props.onEditTask} >✚ Task</button>;\n\t\t  }\n\t\t};\n\n\t\tconst renderField= (n, field, workObject) => {\n\t\t\t// Render text field or edit field\n\t\t    let isEdit = this.props.worksList[n][field][1];\n\n\t\t    if (isEdit) {\n\t\t\t\treturn <EditInput field={ field } section=\"workExperiences\" workid={ n } value={ workObject[field][0] } onButtonClicked={this.props.onSaveClick}  onInputChange={this.props.onInput} />;\n\t\t\t} else {\n\t\t  \t\treturn <p iseditable=\"true\" field={ field } section=\"workExperiences\" workid={ n }  onClick={this.props.onFieldClick}> { workObject[field][0] } </p>;\n\t\t  }\n\t\t};\n\n\t\treturn(\t\n\t\t\t<div className=\"work-container\">\n            \t{ this.props.worksList.map( (workExperience, workExperienceIndex) => {\n\t\t\t\t\t{return (\n\t\t\t\t\t\t<div key={workExperienceIndex.toString()} className=\"work\" workid={ workExperienceIndex }>\n\t\t\t\t\t\t\t{ renderField(workExperienceIndex, 'jobTitle', workExperience) }\n\t\t\t\t\t\t\t{ renderField(workExperienceIndex, 'company', workExperience) }\n\n\t\t\t\t\t\t\t<div className=\"work-date-location\">\n\t\t\t\t\t\t\t\t{ renderField(workExperienceIndex, 'date', workExperience) }\n\t\t\t\t\t\t\t\t{ renderField(workExperienceIndex, 'location', workExperience) }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{ workExperience.tasks[0].map( (task, taskIndex) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<li  key={taskIndex.toString()} workid={ workExperienceIndex }> \n\t\t\t\t\t\t\t\t\t\t\t{ task } \n\t\t\t\t\t\t\t\t\t\t\t<button onClick={this.props.onDeleteTask} workid={ workExperienceIndex } taskid={ taskIndex }>✕</button>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t{ renderAddTaskButton(workExperienceIndex) }\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<button workid={ workExperienceIndex } onClick={this.props.onDeleteWorkExperience}>✕</button>\n\t\t\t\t\t\t</div>);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t<button onClick={this.props.onAddWorkExperience}>✚ Work Experience</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport  { WorkExperience };","import React from 'react';\nimport { EditInput } from './EditInput';\nimport '../styles/Education.css';\n\nclass Education extends React.Component{\n\n\trender(){\n\n\t\tconst renderField= (n, field, workObject) => {\n\t\t\t// Render text field or edit field\n\t\t    let isEdit = this.props.educationList[n][field][1];\n\n\t\t    if (isEdit) {\n\t\t\t\treturn <EditInput field={ field } section=\"education\" educationid={ n } value={ workObject[field][0] } onButtonClicked={this.props.onSaveClick}  onInputChange={this.props.onInput} />;\n\t\t\t} else {\n\t\t  \t\treturn <p iseditable='true' field={ field } section=\"education\" educationid={ n }  onClick={this.props.onFieldClick}> { workObject[field][0] } </p>;\n\t\t  }\n\t\t};\n\n\t\treturn(\n\t\t\t<div className='education-container'>\n\t\t\t\t{this.props.educationList.map((education, educationIndex)=>{\n\t\t\t\t\t{return(\n\t\t\t\t\t\t<div className='education' educationid = { educationIndex } key={ educationIndex.toString()}>\n\t\t\t\t\t\t\t{ renderField(educationIndex, 'eduTitle', education) }\n\t\t\t\t\t\t\t{ renderField(educationIndex, 'school', education) }\n\t\t\t\t\t\t\t{ renderField(educationIndex, 'date', education) }\n\t\t\t\t\t\t\t<button educationid = { educationIndex } onClick={this.props.onDeleteEducation}>✕</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t\t<button onClick={this.props.onAddEducation}>✚ Education</button>\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport { Education };","import './styles/App.css';\nimport React from 'react';\nimport { Header } from './components/Header';\nimport { GeneralIntro } from './components/GeneralIntro';\nimport { GeneralLink } from './components/GeneralLink';\nimport { Section } from './components/Section';\nimport { Skills } from './components/Skills';\nimport { WorkExperience } from './components/WorkExperience';\nimport { Education } from './components/Education';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.editField = (() => {\n\t\t\t// Method to:\n\t\t\t// - Show an \"edit field\" (HTML input) instead of the text field. To allow user to modify text value of all CV fields.\n\t\t\t// - Hide the \"edit field\" (HTML input) and show back the text field.\n\t\t\t// - Save user input to the state variable. \n\n\t\t\tconst show = (e) =>{\n\t\t\t\t// Function to \"mark\" a text field has being edited\n\t\t\t\t// ... It's called when user click on an editable text field, Add Skills, Add Tasks buttons.\n\n\t\t\t\t// If any another field is being modified, stop editing it (text field are modified one by one). \n\t\t\t\thide();\n\n\t\t\t\tconst fieldSection = e.target.getAttribute('section'); // Get section of the CV being modified\n\t\t\t\tconst fieldName = e.target.getAttribute('field'); // Get name of field being modified\n\t\t\t\tconst iseditable = e.target.getAttribute('iseditable'); // Get name of field being modified\n\n\t\t\t\tif(iseditable === 'false') return;\n\n\t\t\t\tlet prevObject;\n\t\t\t\t\n\t\t\t\tswitch (fieldSection) {\n\t\t\t\tcase 'workExperiences':\n\t\t\t\t\tconst workExpNumber = e.target.getAttribute('workid'); // Get ID of work experience to be modified\n\n\t\t\t\t\tprevObject= [...this.state.workExperiences]; // Get a copy of work experience array from the state variable\n\t\t\t\t\tprevObject[workExpNumber][fieldName][1] = true; // Set the edit status as true to show edit input field\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'education':\n\t\t\t\t\tconst educationNumber = e.target.getAttribute('educationid'); // Get ID of work experience to be modified\n\n\t\t\t\t\tprevObject= [...this.state.education]; // Get a copy of work experience array from the state variable\n\t\t\t\t\tprevObject[educationNumber][fieldName][1] = true; // Set the edit status as true to show edit input field\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'skills':\n\t\t\t\t\tprevObject = [...this.state.skills]; // Get a copy of skills array from the state variable\n\t\t\t\t\tprevObject[1] = true; // Set the edit status as true to show edit input field\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tdefault: // For General Intro / General Link section: \n\t\t\t\t\tprevObject = {...this.state[fieldSection]}; // Get a copy of general object from the state variable\n\t\t\t\t\tprevObject[fieldName][1] = true; // Set the edit status as true to show edit input field\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\t[fieldSection]: prevObject,\n\t\t\t\t});\t\t\n\t\t\t};\n\n\t\t\tconst hide = () =>{\n\t\t\t\t// Function to remove all \"edit\" input field\n\n\t\t\t\tlet prevGeneralIntro = {...this.state.generalIntro}; // Get a copy of generalIntro object from the state variable\n\t\t\t\t// Set editStatus has false to hide editField on the DOM.\n\t\t\t\tfor (const key in prevGeneralIntro) {\n\t\t\t\t\tprevGeneralIntro[key][1] = false;\n\t\t\t\t}\n\n\t\t\t\tlet prevGeneralLink = {...this.state.generalLink}; // Get a copy of generalLink object from the state variable\n\t\t\t\t// Set editStatus has false to hide editField on the DOM.\n\t\t\t\tfor (const key in prevGeneralLink) {\n\t\t\t\t\tprevGeneralLink[key][1] = false;\n\t\t\t\t}\n\n\t\t\t\tlet prevWorkExp = [...this.state.workExperiences]; // Get a copy of workExperiences array from the state variable\n\t\t\t\t// Set editStatus has false to hide editField on the DOM.\n\t\t\t\tfor (const n in prevWorkExp) {\n\t\t\t\t\tprevWorkExp[n].jobTitle[1] = false;\n\t\t\t\t\tprevWorkExp[n].company[1] = false;\n\t\t\t\t\tprevWorkExp[n].date[1] = false;\n\t\t\t\t\tprevWorkExp[n].location[1] = false;\n\t\t\t\t\tprevWorkExp[n].tasks[1] = false;\n\t\t\t\t}\n\n\t\t\t\tlet prevEducation = [...this.state.education]; // Get a copy of workExperiences array from the state variable\n\t\t\t\t// Set editStatus has false to hide editField on the DOM.\n\t\t\t\tfor (const n in prevEducation) {\n\t\t\t\t\tprevEducation[n].eduTitle[1] = false;\n\t\t\t\t\tprevEducation[n].school[1] = false;\n\t\t\t\t\tprevEducation[n].date[1] = false;\n\t\t\t\t}\n\n\t\t\t\t// Update state object\n\t\t\t\tthis.setState({\n\t\t\t\t\tgeneralIntro: prevGeneralIntro,\n\t\t\t\t\tgeneralLink: prevGeneralLink,\n\t\t\t\t\tskills: [this.state.skills[0], false],\n\t\t\t\t\tworkExperiences: prevWorkExp,\n\t\t\t\t\teducation: prevEducation,\n\t\t\t\t});\n\t\t\t};\n\t\n\t\t\tconst save = () =>{\n\t\t\t\t// Function to save user entry into the state variable. \n\t\t\t\t// ... user entry in saved each time he type on the field or when he click on \"save\" button.\n\n\t\t\t\t// Get the new text value from the input field.\n\t\t\t\tconst input = document.querySelector('[field-input]');\n\t\t\t\tconst value = input.value.trim();\n\n\t\t\t\tconst fieldSection = input.getAttribute('section');  // Get section of the CV being modified\n\t\t\t\tconst fieldName = input.getAttribute('field-input'); // Get name of field being modified\n\t\t\t\tlet prevObject;\n\n\t\t\t\tswitch (fieldSection) {\n\t\t\t\tcase 'workExperiences':\n\t\t\t\t\tconst workExpId = input.getAttribute('workid'); // Get ID of work experience to being modified\n\n\t\t\t\t\tprevObject= [...this.state.workExperiences]; // Get a copy of work experience object from the state variable\n\n\t\t\t\t\tif (value){\n\t\t\t\t\t\t// If a value is entered, update state object copy with new value entered by the user\n\t\t\t\t\t\tprevObject[workExpId][fieldName][0] = value;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// else (input is empty), show the default value\n\t\t\t\t\t\tprevObject[workExpId][fieldName][0] = prevObject[workExpId][fieldName][2];\n\t\t\t\t\t};\t\t\t\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'education':\n\t\t\t\t\tconst sectionid = input.getAttribute('educationid'); // Get ID of work experience to being modified\n\n\t\t\t\t\tprevObject= [...this.state.education]; // Get a copy of work experience object from the state variable\n\n\t\t\t\t\tif (value){\n\t\t\t\t\t\t// If a value is entered, update state object copy with new value entered by the user\n\t\t\t\t\t\tprevObject[sectionid][fieldName][0] = value;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// else (input is empty), show the default value\n\t\t\t\t\t\tprevObject[sectionid][fieldName][0] = prevObject[sectionid][fieldName][2];\n\t\t\t\t\t};\t\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // For General Intro / General Link section: \n\t\t\t\t\tprevObject = {...this.state[fieldSection]}; // Get a copy of general object from the state variable\n\n\t\t\t\t\tif (value){\n\t\t\t\t\t\t// If a value is entered, update state object copy with new value entered by the user\n\t\t\t\t\t\tprevObject[fieldName][0] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If input is empty, Update state object copy with the default value\n\t\t\t\t\t\tprevObject[fieldName][0] = prevObject[fieldName][2];\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\t[fieldSection]: prevObject,\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn { show, hide, save };\n\t\t})();\n\n\t\tthis.skill = (() => {\n\t\t\t// Method to save or delete a skill from the \"Skills\" section of the CV.\n\t\n\t\t\tconst saveSkill = () =>{\n\t\t\t\t// Get the new skill from the input field.\n\t\t\t\tconst input = document.querySelector('[field-input=\"skills\"]');\n\t\t\t\tconst value = input.value.trim();\n\t\t\n\t\t\t\tconst fieldSection = input.getAttribute('section');  // Get section of the CV being modified\n\t\t\t\tif (fieldSection !== 'skills') return; \n\n\t\t\t\tlet prevSkillsList = [...this.state.skills]; // Get a copy of skills array from the state variable\n\n\t\t\t\tif (value){\n\t\t\t\t\t// If a value is entered, update state object copy with new value entered by the user\n\t\t\t\t\tprevSkillsList[0].push(value); // Update the copy array with the new skill\n\t\t\t\t\tprevSkillsList[1] = false; // Set the edit status as false to remove the edit input field\n\t\n\t\t\t\t} else {\n\t\t\t\t\t// else, discard the changes and close edit field. \n\t\t\t\t\tprevSkillsList[1] = false;\n\t\t\t\t};\n\n\t\t\t\t//Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tskills: prevSkillsList,\n\t\t\t\t});\n\t\t\t};\n\t\n\t\t\tconst deleteSkill = (e) =>{\t\t\t\n\t\t\t\t// Get ID of the skill to be deleted\n\t\t\t\tconst skillId = e.target.getAttribute('skillid'); // Get ID of the work experience\n\t\n\t\t\t\tlet prevSkills = [...this.state.skills]; // Get a copy of skill array from the state variable\n\t\n\t\t\t\tprevSkills[0].splice(skillId, 1); // Remove task for the copy array\n\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tskills: prevSkills,\n\t\t\t\t});\n\n\t\t\t};\n\n\t\t\treturn { saveSkill, deleteSkill };\n\t\t})();\n\n\t\tthis.workExperience = (() => {\n\t\t\t// Method to add or delete a \"work experience\" from the \"Work Experience\" section of the CV.\n\t\n\t\t\tconst addWorkExperience = () =>{\n\t\t\t\t// Function to add a \"work experience\" from Work Experience Section\n\n\t\t\t\tconst defaultWorkExperience = {\n\t\t\t\t\tjobTitle: ['Job Title', false, 'Job Title'],\n\t\t\t\t\tcompany: ['Company Name', false, 'Company Name'],\n\t\t\t\t\tdate: ['Working date', false, 'Working date'],\n\t\t\t\t\tlocation: ['City, Country', false, 'City, Country'],\n\t\t\t\t\ttasks: [['Main Task 1', 'Main Task 2'], false],\n\t\t\t\t};\n\n\t\t\t\tlet prevWorkExp= [...this.state.workExperiences]; // Get a copy of workExperience array from the state variable\n\t\t\n\t\t\t\tprevWorkExp.push(defaultWorkExperience); // Add default work experience to the copy array. \n\t\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tworkExperiences: prevWorkExp,\n\t\t\t\t});\n\t\t\t};\n\t\t\n\t\t\tconst deleteWorkExperience = (e) =>{\n\t\t\t\t// Function to delete a \"work experience\" from Work Experience Section\n\t\t\n\t\t\t\t// Get ID of the work experience to be deleted\n\t\t\t\tconst workExpId = e.target.getAttribute('workid');\n\t\t\n\t\t\t\tlet prevWorkExp= [...this.state.workExperiences]; // Get a copy of workExperience array from the state variable\n\t\t\n\t\t\t\tprevWorkExp.splice(workExpId, 1); // Remove the work experience from the copy array\n\t\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tworkExperiences: prevWorkExp,\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn { addWorkExperience, deleteWorkExperience };\n\t\t})();\n\n\t\tthis.task = (() => {\n\t\t\t// Method to save or delete a task from the \"Work Experience\" section of the CV.\n\t\n\t\t\tconst saveTask = () =>{\n\t\t\t\t// Function to save a task to the Work Experience Section\n\t\n\t\t\t\t// Get the new task from the input field.\n\t\t\t\tconst input = document.querySelector('[field-input=\"tasks\"]');\n\t\t\t\tconst workExpNumber = input.getAttribute('workid');\n\t\t\t\tconst value = input.value.trim();\n\t\t\t\n\t\t\t\tconst fieldSection = input.getAttribute('section');  // Get section of the CV being modified\n\t\t\t\tif (fieldSection !== 'workExperiences') return; \n\t\n\t\t\t\tlet prevWorkExp= [...this.state.workExperiences]; // Get a copy of work experience array from the state variable\n\t\t\t\n\t\t\t\tif (value){\n\t\t\t\t\t// If a value is entered, update state object copy with new value entered by the user\n\t\t\t\t\tprevWorkExp[workExpNumber].tasks[0].push(value); // Update the copy array with the new value\n\t\t\t\t\tprevWorkExp[workExpNumber].tasks[1] = false; // Set the edit status as false to remove edit input field\t\t\n\t\t\t\t} else {\n\t\t\t\t\t// else, discard the changes and close edit field. \n\t\t\t\t\tprevWorkExp[workExpNumber].tasks[1] = false; // Set the edit status as remove edit input field\n\t\t\t\t};\n\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tworkExperiences: prevWorkExp,\n\t\t\t\t});\n\t\t\t};\n\t\n\t\n\t\t\tconst deleteTask = (e) =>{\n\t\t\t\t// Function to delete a task from Work Experience Section\n\t\n\t\t\t\t// Get ID of the work experience task to be deleted\n\t\t\t\tconst workExpId = e.target.getAttribute('workid'); // Get ID of the work experience\n\t\t\t\tconst taskId = e.target.getAttribute('taskid'); // Get ID of the task\n\t\n\t\t\t\tlet prevWorkExp= [...this.state.workExperiences]; // Get a copy of work experience object from the state variable\n\t\n\t\t\t\tprevWorkExp[workExpId].tasks[0].splice(taskId, 1); // Remove task for the copy array\n\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\tworkExperiences: prevWorkExp,\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn { saveTask, deleteTask };\n\t\t})();\n\n\t\tthis.education = (() => {\n\t\t\t// Method to add or delete an \"education\" box from the \"Education\" section of the CV.\n\t\n\t\t\tconst addEducation = () =>{\n\n\t\t\t\tconst defaultEducation = {\n\t\t\t\t\teduTitle: ['School Title', false, 'Diploma Title'],\n\t\t\t\t\tschool: ['School Name', false, 'School Name'],\n\t\t\t\t\tdate: ['Schooling date', false, 'Schooling date'],\n\t\t\t\t};\n\n\t\t\t\tlet prevEducation= [...this.state.education]; // Get a copy of education array from the state variable\n\t\t\n\t\t\t\tprevEducation.push(defaultEducation); // Add default education object to the copy array. \n\t\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\teducation: prevEducation,\n\t\t\t\t});\n\t\t\t};\n\t\t\n\t\t\tconst deleteEducation = (e) =>{\n\t\t\n\t\t\t\t// Get ID of the work experience to be deleted\n\t\t\t\tconst sectionid = e.target.getAttribute('educationid');\n\t\t\n\t\t\t\tlet prevEducation= [...this.state.education]; // Get a copy of education array from the state variable\n\t\t\n\t\t\t\tprevEducation.splice(sectionid, 1); // Remove default education object to the copy array. \n\t\t\n\t\t\t\t// Update state object using modified copy\n\t\t\t\tthis.setState({\n\t\t\t\t\teducation: prevEducation,\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn { addEducation, deleteEducation };\n\t\t})();\n\n\t\tthis.mode = (()=>{\n\t\t\t// Toggle between \"Edit mode\" and \"Preview mode\"\n\n\t\t\tconst preview = async () => {\n\t\t\t\t// Switch to preview mode, fields are not editable and buttons are hidden\n\n\t\t\t\tawait this.editField.hide(); // If an edit field is open, hide it (await is needed to correctly apply attribute changes to the field)\n\t\t\n\t\t\t\t// Make the field not editable (also remove CSS :hover effect)\n\t\t\t\tconst editableField = document.querySelectorAll('[iseditable]');\n\t\t\t\teditableField.forEach(field => {\n\t\t\t\t\tfield.setAttribute('iseditable', 'false');\n\t\t\t\t});\n\n\t\t\t\t// Hide all the \"+\" buttons\n\t\t\t\tconst buttons = document.querySelectorAll('button');\n\t\t\t\tbuttons.forEach(button => {\n\t\t\t\t\tbutton.classList.add('hide');\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Make the slider switch from \"Edit CV\" to \"Preview CV\"\n\t\t\t\tconst slider = document.querySelector('.btn-slider');\n\t\t\t\tslider.classList.add('slider-active');\n\t\t\t};\n\n\t\t\tconst edit = () => {\n\t\t\t\t// Switch to edit mode\n\n\t\t\t\t// Make the field editable (also allow CSS :hover effect)\n\t\t\t\tconst editableField = document.querySelectorAll('[iseditable]');\n\t\t\t\teditableField.forEach(field => {\n\t\t\t\t\tfield.setAttribute('iseditable', 'true');\n\t\t\t\t});\n\n\t\t\t\t// Show all the \"+\" buttons back\n\t\t\t\tconst buttons = document.querySelectorAll('button');\n\t\t\t\tbuttons.forEach(button => {\n\t\t\t\t\tbutton.classList.remove('hide');\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Make the slider switch from \"Preview CV\" to \"Edit CV\"\n\t\t\t\tconst slider = document.querySelector('.btn-slider');\n\t\t\t\tslider.classList.remove('slider-active');\n\t\t\t};\n\n\t\t\treturn {preview, edit};\n\t\t})();\n\t\t\n\t\t// Create a state object with some default values...\n\t\t// ... State object properties store text value for every section of the CV (Intro, link, work experience, ...).\n\t\t// ... Each properties is an array with [textValue, EditStatus, defaultValue]\n\t\t// ... If EditStatus = True, the component is being edited, text field is changed for a input field\n\t\t// ... Which allow user to enter a new text value.\n\n\t\tthis.state = {\n\t\t\tgeneralIntro: {\n\t\t\t\tname: ['John doe', false, 'Full Name'],\n\t\t\t\tjob: ['Web Developer', false, 'Profession'],\n\t\t\t\tdesc: [`Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n\t\t\t\tProin id placerat est. Mauris sed lacus mi. Ut vel mattis purus. \n\t\t\t\tSuspendisse mollis tincidunt arcu a vehicula.`, false, 'Short Description about yourself.'],\n\t\t\t},\n\t\t\tgeneralLink: {\n\t\t\t\tmail: ['john.doe@mail.com', false, 'mail@mail.com'],\n\t\t\t\tnumber: ['000 123 456 789', false, '000 123 456 789'],\n\t\t\t\tlocation: ['New York, USA', false, 'City, Country'],\n\t\t\t\tgit: ['johndoe', false, 'johndoe'],\n\t\t\t},\n\t\t\tskills: [['Web Dev', 'CAD'], false],\n\t\t\tworkExperiences: [{\n\t\t\t\tjobTitle: ['R&D specialist', false, 'Job Title'],\n\t\t\t\tcompany: ['Some Company SA', false, 'Company Name'],\n\t\t\t\tdate: ['2021 - 2022', false, 'Working date'],\n\t\t\t\tlocation: ['New York, USA', false, 'City, Country'],\n\t\t\t\ttasks: [['Main Task 1', 'Main Task2'], false],\n\t\t\t}, {\n\t\t\t\tjobTitle: ['Associate R&D specialist', false, 'Job Title'],\n\t\t\t\tcompany: ['Some Company SA', false, 'Company Name'],\n\t\t\t\tdate: ['2015 - 2021', false, 'Working date'],\n\t\t\t\tlocation: ['New York, USA', false, 'City, Country'],\n\t\t\t\ttasks: [['Main Task 1', 'Main Task2'], false],\n\t\t\t},\n\t\t\t],\n\t\t\teducation: [{\n\t\t\t\teduTitle: ['Bachelor of Engineering', false, 'Diploma Title'],\n\t\t\t\tschool: ['National School of Engineering, Chicago', false, 'School Name'],\n\t\t\t\tdate: ['2014 - 2015', false, 'Schooling date'],\n\t\t\t}, {\n\t\t\t\teduTitle: ['Car Mechanician', false, 'Diploma Title'],\n\t\t\t\tschool: ['Mechanical School of Chicago', false, 'School Name'],\n\t\t\t\tdate: ['2011 - 2014', false, 'Schooling date'],\n\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\t// If App component mount...\n\n\t\tconst root = document.querySelector('#root'); // Get root element\n\n\t\troot.addEventListener('keydown', (e => {\n\t\t\t// When user is editing a field, if he press enter, the field is saved. \n\t\t\tif (e.key === 'Enter') {\n\t\t\t\tconst input = document.querySelector('[field-input]');\n\t\t\t\tconst fieldName = input.getAttribute('field-input'); // Get name of field being modified\n\n\t\t\t\tswitch (fieldName) {\n\t\t\t\tcase 'skills':\n\t\t\t\t\tthis.skill.saveSkill();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'tasks':\n\t\t\t\t\tthis.task.saveTask();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.editField.hide();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\te.stopImmediatePropagation();\n\t\t}));\n\t};\n\n\trender(){\t\n\t  return (\n\t  \t<div className=\"App\">\n\t\t\t  \t<Header onPreviewClick= { this.mode.preview } onEditClick= { this.mode.edit }/>\n\t\t\t\t<div className=\"App-cv\">\n\t\t\t\t\t<div className=\"general-container\">\n\t\t\t\t\t\t<GeneralIntro  generalState={ this.state.generalIntro } \n\t\t\t\t\t\t\tonFieldClick={ this.editField.show } onSaveClick={ this.editField.hide } onInput={ this.editField.save }/>\n\t\t\t\t\t\t<GeneralLink  generalState={ this.state.generalLink } \n\t\t\t\t\t\t\tonFieldClick={ this.editField.show } onSaveClick={ this.editField.hide } onInput={ this.editField.save }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Section sectionName=\"Skills\" />\n\t\t\t\t\t<Skills skillsList = {this.state.skills} \n\t\t\t\t\t\tonSaveClick={ this.skill.saveSkill } \n\t\t\t\t\t\tonDeleteSkill={ this.skill.deleteSkill } \n\t\t\t\t\t\tonAddSkill = { this.editField.show } />\n\t\t\t\t\t<Section sectionName=\"Work Experience\" />\n\t\t\t\t\t<WorkExperience worksList={this.state.workExperiences} \n\t\t\t\t\t\tonFieldClick={ this.editField.show } onSaveClick={ this.editField.hide } onInput={ this.editField.save }\n\t\t\t\t\t\tonAddWorkExperience={ this.workExperience.addWorkExperience } onDeleteWorkExperience={ this.workExperience.deleteWorkExperience }\n\t\t\t\t\t\tonEditTask={ this.editField.show } onDeleteTask={ this.task.deleteTask } onSaveTask={ this.task.saveTask }\n\t\t\t\t\t/>\n\t\t\t\t\t<Section sectionName=\"Education\" />\n\t\t\t\t\t<Education educationList={this.state.education}\n\t\t\t\t\t\tonFieldClick={ this.editField.show } onSaveClick={ this.editField.hide } onInput={ this.editField.save } \n\t\t\t\t\t\tonAddEducation={ this.education.addEducation } onDeleteEducation={ this.education.deleteEducation }\n\t\t\t\t\t/>\n\t  \t\t</div>\n\t\t\t  <a href=\"https://github.com/zellko/top-cv-application\">\n\t\t\t\t\t<svg viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path fill=\"currentColor\" d=\"M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</a>\n\t  \t</div>\n\t  );\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n"],"sourceRoot":""}